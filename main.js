// Hlavn√≠ aplikaƒçn√≠ logika - NOV√Å HYBRIDN√ç VERZE

// Glob√°ln√≠ promƒõnn√©
let APP_CONFIG = {};
let tablesData = {};
let messages = [];
let embeddingsReady = false;
let queryProcessor = null; // N√°≈° nov√Ω procesor dotaz≈Ø

// BLOKOV√ÅN√ç STAR√âHO SYST√âMU
window.HYBRID_SYSTEM_ENABLED = true;

// Naƒçten√≠ konfigurace
function loadConfig() {
    APP_CONFIG.OPENAI_API_KEY = security.loadSecure('openai_key') || '';
    APP_CONFIG.TABIDOO_API_TOKEN = security.loadSecure('tabidoo_token') || '';
    APP_CONFIG.TABIDOO_APP_ID = security.loadSecure('tabidoo_app_id') || '';
    
    console.log('Config loaded:', {
        hasOpenAI: !!APP_CONFIG.OPENAI_API_KEY,
        hasTabidoo: !!APP_CONFIG.TABIDOO_API_TOKEN,
        hasAppId: !!APP_CONFIG.TABIDOO_APP_ID
    });
}

// Validace API kl√≠ƒç≈Ø
function validateApiKeys(openaiKey, tabidooToken) {
    const errors = [];
    
    if (!openaiKey) {
        errors.push('OpenAI API kl√≠ƒç je povinn√Ω');
    } else if (!CONFIG.VALIDATION.API_KEY_PATTERNS.OPENAI.test(openaiKey)) {
        errors.push('OpenAI API kl√≠ƒç m√° neplatn√Ω form√°t');
    }
    
    if (!tabidooToken) {
        errors.push('Tabidoo API token je povinn√Ω');
    } else if (!CONFIG.VALIDATION.API_KEY_PATTERNS.TABIDOO.test(tabidooToken)) {
        errors.push('Tabidoo token m√° neplatn√Ω form√°t');
    }
    
    return errors;
}

// Ulo≈æen√≠ nastaven√≠
function saveSettings() {
    const openaiKey = document.getElementById('openai-key').value.trim();
    const tabidooToken = document.getElementById('tabidoo-token').value.trim();
    const tabidooAppId = document.getElementById('tabidoo-app-id').value.trim();
    
    console.log('Saving settings...');
    
    if (openaiKey) {
        security.saveSecure('openai_key', openaiKey);
        APP_CONFIG.OPENAI_API_KEY = openaiKey;
    }
    
    if (tabidooToken) {
        security.saveSecure('tabidoo_token', tabidooToken);
        APP_CONFIG.TABIDOO_API_TOKEN = tabidooToken;
    }
    
    if (tabidooAppId) {
        security.saveSecure('tabidoo_app_id', tabidooAppId);
        APP_CONFIG.TABIDOO_APP_ID = tabidooAppId;
    }
    
    alert('Nastaven√≠ bezpeƒçnƒõ ulo≈æeno!');
    toggleSettings();
    
    if (Object.keys(tablesData).length === 0 && APP_CONFIG.OPENAI_API_KEY && APP_CONFIG.TABIDOO_API_TOKEN && APP_CONFIG.TABIDOO_APP_ID) {
        location.reload();
    }
}

// Zobrazen√≠/skryt√≠ nastaven√≠
function toggleSettings() {
    const panel = document.getElementById('settings-panel');
    const isHidden = panel.style.display === 'none';
    panel.style.display = isHidden ? 'block' : 'none';
    
    if (isHidden) {
        const openaiField = document.getElementById('openai-key');
        const tabidooField = document.getElementById('tabidoo-token');
        const appIdField = document.getElementById('tabidoo-app-id');
        
        openaiField.value = '';
        tabidooField.value = '';
        appIdField.value = APP_CONFIG.TABIDOO_APP_ID || '';
        
        openaiField.placeholder = APP_CONFIG.OPENAI_API_KEY ? 'API kl√≠ƒç je nastaven (pro zmƒõnu zadejte nov√Ω)' : 'Zadejte OpenAI API kl√≠ƒç';
        tabidooField.placeholder = APP_CONFIG.TABIDOO_API_TOKEN ? 'Token je nastaven (pro zmƒõnu zadejte nov√Ω)' : 'Zadejte Tabidoo API token';
    }
}

// Export konfigurace
function exportConfig() {
    const config = {
        openai: security.loadSecure('openai_key'),
        tabidoo: security.loadSecure('tabidoo_token'),
        appId: security.loadSecure('tabidoo_app_id'),
        timestamp: new Date().toISOString()
    };
    
    const exportKey = prompt('Zadejte heslo pro export (zapamatujte si ho):');
    if (!exportKey) return;
    
    const encrypted = security.encrypt(JSON.stringify(config), exportKey);
    
    const blob = new Blob([encrypted], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tabidoo-config-${Date.now()}.enc`;
    a.click();
    URL.revokeObjectURL(url);
}

// Import konfigurace
function importConfig() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.enc';
    
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        const encrypted = await file.text();
        const exportKey = prompt('Zadejte heslo pro import:');
        if (!exportKey) return;
        
        try {
            const decrypted = security.decrypt(encrypted, exportKey);
            const config = JSON.parse(decrypted);
            
            security.saveSecure('openai_key', config.openai);
            security.saveSecure('tabidoo_token', config.tabidoo);
            security.saveSecure('tabidoo_app_id', config.appId);
            
            alert('Konfigurace √∫spƒõ≈°nƒõ importov√°na!');
            location.reload();
        } catch (error) {
            alert('Chyba p≈ôi importu: Nespr√°vn√© heslo nebo po≈°kozen√Ω soubor');
        }
    };
    
    input.click();
}

// NOV√Å FUNKCE - Odesl√°n√≠ zpr√°vy s hybridn√≠m p≈ô√≠stupem
async function sendMessage() {
    console.log('üöÄ Send message clicked - HYBRID VERSION');
    
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    const messageText = chatInput.value.trim();
    
    if (!messageText) {
        return;
    }
    
    if (!APP_CONFIG.TABIDOO_API_TOKEN) {
        alert('Nejprve nastavte Tabidoo API token!');
        toggleSettings();
        return;
    }
    
    // P≈ôidat u≈æivatelovu zpr√°vu
    addMessage('user', messageText);
    chatInput.value = '';
    
    // Nastavit loading stav
    chatInput.disabled = true;
    sendButton.disabled = true;
    sendButton.textContent = 'Zpracov√°v√°m...';
    
    try {
        // NOV√Å LOGIKA - Pou≈æ√≠t query processor
        const result = await queryProcessor.processQuery(messageText);
        console.log('üì§ Query result:', result);
        
        // Zobrazit odpovƒõƒè
        addMessage('assistant', result.response);
        
        // Debug info do konzole
        console.log('üîç Query type:', result.type);
        if (result.count !== undefined) {
            console.log('üìä Count:', result.count);
        }
        if (result.records) {
            console.log('üìã Records found:', result.records.length);
        }
        
    } catch (error) {
        console.error('‚ùå Error processing query:', error);
        
        // Fallback na star√Ω zp≈Øsob
        try {
            console.log('üîÑ Trying fallback...');
            const fallbackResponse = await smartCallOpenAI(messageText);
            addMessage('assistant', fallbackResponse);
        } catch (fallbackError) {
            console.error('‚ùå Fallback also failed:', fallbackError);
            addMessage('error', 'Omlouv√°m se, nastala chyba p≈ôi zpracov√°n√≠ dotazu. Zkuste to pros√≠m znovu.');
        }
    } finally {
        // Obnovit UI
        chatInput.disabled = false;
        sendButton.disabled = false;
        sendButton.textContent = 'Odeslat';
        chatInput.focus();
    }
}

// NOV√Å FUNKCE - Inicializace query processoru
function initializeQueryProcessor() {
    console.log('üß† Initializing Query Processor...');
    
    if (!queryProcessor && Object.keys(tablesData).length > 0) {
        queryProcessor = new QueryProcessor(tablesData);
        console.log('‚úÖ Query Processor initialized');
        
        // Zobrazit debug info
        const stats = queryProcessor.getEntityStats();
        console.log('üìä Data statistics:', stats);
        
        return true;
    }
    
    return false;
}

// ZABLOKOVAT STAR√ù WINDOW.ONLOAD
// Spu≈°tƒõn√≠ aplikace - POUZE HYBRIDN√ç VERZE
window.onload = function() {
    if (!window.HYBRID_SYSTEM_ENABLED) {
        console.log('üö´ Hybrid system disabled, skipping...');
        return;
    }
    
    console.log('üåü Window loaded, starting HYBRID init...');
    setTimeout(hybridInit, 100);
};

// HLAVN√ç HYBRIDN√ç INICIALIZACE
async function hybridInit() {
    console.log('üöÄ Starting hybrid initialization...');
    
    if (typeof security === 'undefined') {
        console.error('‚ùå Security manager not loaded!');
        setTimeout(() => hybridInit(), 100);
        return;
    }
    
    loadConfig();
    
    const chatMessages = document.getElementById('chat-messages');
    
    // Pokud nem√°me API kl√≠ƒçe
    if (!APP_CONFIG.TABIDOO_API_TOKEN || !APP_CONFIG.TABIDOO_APP_ID) {
        chatMessages.innerHTML = '';
        showWelcomeScreen();
        
        document.getElementById('chat-input').addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });
        return;
    }
    
    // Spustit diagnostiku p≈ôi prvn√≠m spu≈°tƒõn√≠
    if (!localStorage.getItem(CONFIG.CACHE.DIAGNOSTICS_KEY)) {
        const diagnosticsOk = await runDiagnostics();
        localStorage.setItem(CONFIG.CACHE.DIAGNOSTICS_KEY, 'true');
        return;
    }
    
    chatMessages.innerHTML = `<div class="message system-message">üìä Naƒç√≠t√°m data a inicializuji hybridn√≠ syst√©m...</div>`;
    
    const dataLoaded = await loadTabidooData();
    
    if (dataLoaded) {
        // Inicializovat query processor
        console.log('üß† Initializing query processor...');
        const processorReady = initializeQueryProcessor();
        
        if (!processorReady) {
            throw new Error('Failed to initialize query processor');
        }
        
        chatMessages.innerHTML = '';
        addMessage('system', '‚úÖ Hybridn√≠ syst√©m je p≈ôipraven!');
        
        // Zobrazit welcome screen m√≠sto dlouh√©ho textu
        setTimeout(() => {
            showWelcomeScreen();
        }, 500);
        
        // Debug info
        const stats = queryProcessor.getEntityStats();
        console.log('üìà System ready with data:', stats);
        
    } else {
        chatMessages.innerHTML = '';
        addMessage('error', CONFIG.MESSAGES.DATA_LOAD_ERROR);
    }
    
    document.getElementById('chat-input').addEventListener('keydown', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
}

// NOV√Å FUNKCE - Debug funkce pro testov√°n√≠
window.debugQueryProcessor = function(query) {
    if (!queryProcessor) {
        console.log('‚ùå Query processor not initialized');
        return;
    }
    
    console.log('üîç Debug query:', query);
    queryProcessor.processQuery(query).then(result => {
        console.log('üì§ Debug result:', result);
    });
};

// NOV√Å FUNKCE - Z√≠sk√°n√≠ statistik syst√©mu
window.getSystemStats = function() {
    if (!queryProcessor) {
        console.log('‚ùå Query processor not initialized');
        return;
    }
    
    const stats = queryProcessor.getEntityStats();
    console.log('üìä System Statistics:', stats);
    return stats;
};

// Export pro testov√°n√≠
window.hybridSystem = {
    queryProcessor: () => queryProcessor,
    tablesData: () => tablesData,
    sendMessage: sendMessage,
    debugQuery: window.debugQueryProcessor,
    getStats: window.getSystemStats
};

// Validace API kl√≠ƒç≈Ø
function validateApiKeys(openaiKey, tabidooToken) {
    const errors = [];
    
    if (!openaiKey) {
        errors.push('OpenAI API kl√≠ƒç je povinn√Ω');
    } else if (!CONFIG.VALIDATION.API_KEY_PATTERNS.OPENAI.test(openaiKey)) {
        errors.push('OpenAI API kl√≠ƒç m√° neplatn√Ω form√°t');
    }
    
    if (!tabidooToken) {
        errors.push('Tabidoo API token je povinn√Ω');
    } else if (!CONFIG.VALIDATION.API_KEY_PATTERNS.TABIDOO.test(tabidooToken)) {
        errors.push('Tabidoo token m√° neplatn√Ω form√°t');
    }
    
    return errors;
}

// Ulo≈æen√≠ nastaven√≠
function saveSettings() {
    const openaiKey = document.getElementById('openai-key').value.trim();
    const tabidooToken = document.getElementById('tabidoo-token').value.trim();
    const tabidooAppId = document.getElementById('tabidoo-app-id').value.trim();
    
    console.log('Saving settings...');
    
    if (openaiKey) {
        security.saveSecure('openai_key', openaiKey);
        APP_CONFIG.OPENAI_API_KEY = openaiKey;
    }
    
    if (tabidooToken) {
        security.saveSecure('tabidoo_token', tabidooToken);
        APP_CONFIG.TABIDOO_API_TOKEN = tabidooToken;
    }
    
    if (tabidooAppId) {
        security.saveSecure('tabidoo_app_id', tabidooAppId);
        APP_CONFIG.TABIDOO_APP_ID = tabidooAppId;
    }
    
    alert('Nastaven√≠ bezpeƒçnƒõ ulo≈æeno!');
    toggleSettings();
    
    if (Object.keys(tablesData).length === 0 && APP_CONFIG.OPENAI_API_KEY && APP_CONFIG.TABIDOO_API_TOKEN && APP_CONFIG.TABIDOO_APP_ID) {
        location.reload();
    }
}

// Zobrazen√≠/skryt√≠ nastaven√≠
function toggleSettings() {
    const panel = document.getElementById('settings-panel');
    const isHidden = panel.style.display === 'none';
    panel.style.display = isHidden ? 'block' : 'none';
    
    if (isHidden) {
        const openaiField = document.getElementById('openai-key');
        const tabidooField = document.getElementById('tabidoo-token');
        const appIdField = document.getElementById('tabidoo-app-id');
        
        openaiField.value = '';
        tabidooField.value = '';
        appIdField.value = APP_CONFIG.TABIDOO_APP_ID || '';
        
        openaiField.placeholder = APP_CONFIG.OPENAI_API_KEY ? 'API kl√≠ƒç je nastaven (pro zmƒõnu zadejte nov√Ω)' : 'Zadejte OpenAI API kl√≠ƒç';
        tabidooField.placeholder = APP_CONFIG.TABIDOO_API_TOKEN ? 'Token je nastaven (pro zmƒõnu zadejte nov√Ω)' : 'Zadejte Tabidoo API token';
    }
}

// Export konfigurace
function exportConfig() {
    const config = {
        openai: security.loadSecure('openai_key'),
        tabidoo: security.loadSecure('tabidoo_token'),
        appId: security.loadSecure('tabidoo_app_id'),
        timestamp: new Date().toISOString()
    };
    
    const exportKey = prompt('Zadejte heslo pro export (zapamatujte si ho):');
    if (!exportKey) return;
    
    const encrypted = security.encrypt(JSON.stringify(config), exportKey);
    
    const blob = new Blob([encrypted], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tabidoo-config-${Date.now()}.enc`;
    a.click();
    URL.revokeObjectURL(url);
}

// Import konfigurace
function importConfig() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.enc';
    
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        const encrypted = await file.text();
        const exportKey = prompt('Zadejte heslo pro import:');
        if (!exportKey) return;
        
        try {
            const decrypted = security.decrypt(encrypted, exportKey);
            const config = JSON.parse(decrypted);
            
            security.saveSecure('openai_key', config.openai);
            security.saveSecure('tabidoo_token', config.tabidoo);
            security.saveSecure('tabidoo_app_id', config.appId);
            
            alert('Konfigurace √∫spƒõ≈°nƒõ importov√°na!');
            location.reload();
        } catch (error) {
            alert('Chyba p≈ôi importu: Nespr√°vn√© heslo nebo po≈°kozen√Ω soubor');
        }
    };
    
    input.click();
}

// NOV√Å FUNKCE - Odesl√°n√≠ zpr√°vy s hybridn√≠m p≈ô√≠stupem
async function sendMessage() {
    console.log('üöÄ Send message clicked - HYBRID VERSION');
    
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    const messageText = chatInput.value.trim();
    
    if (!messageText) {
        return;
    }
    
    if (!APP_CONFIG.TABIDOO_API_TOKEN) {
        alert('Nejprve nastavte Tabidoo API token!');
        toggleSettings();
        return;
    }
    
    // P≈ôidat u≈æivatelovu zpr√°vu
    addMessage('user', messageText);
    chatInput.value = '';
    
    // Nastavit loading stav
    chatInput.disabled = true;
    sendButton.disabled = true;
    sendButton.textContent = 'Zpracov√°v√°m...';
    
    try {
        // NOV√Å LOGIKA - Pou≈æ√≠t query processor
        const result = await queryProcessor.processQuery(messageText);
        console.log('üì§ Query result:', result);
        
        // Zobrazit odpovƒõƒè
        addMessage('assistant', result.response);
        
        // Debug info do konzole
        console.log('üîç Query type:', result.type);
        if (result.count !== undefined) {
            console.log('üìä Count:', result.count);
        }
        if (result.records) {
            console.log('üìã Records found:', result.records.length);
        }
        
    } catch (error) {
        console.error('‚ùå Error processing query:', error);
        
        // Fallback na star√Ω zp≈Øsob
        try {
            console.log('üîÑ Trying fallback...');
            const fallbackResponse = await smartCallOpenAI(messageText);
            addMessage('assistant', fallbackResponse);
        } catch (fallbackError) {
            console.error('‚ùå Fallback also failed:', fallbackError);
            addMessage('error', 'Omlouv√°m se, nastala chyba p≈ôi zpracov√°n√≠ dotazu. Zkuste to pros√≠m znovu.');
        }
    } finally {
        // Obnovit UI
        chatInput.disabled = false;
        sendButton.disabled = false;
        sendButton.textContent = 'Odeslat';
        chatInput.focus();
    }
}

// NOV√Å FUNKCE - Inicializace query processoru
function initializeQueryProcessor() {
    console.log('üß† Initializing Query Processor...');
    
    if (!queryProcessor && Object.keys(tablesData).length > 0) {
        queryProcessor = new QueryProcessor(tablesData);
        console.log('‚úÖ Query Processor initialized');
        
        // Zobrazit debug info
        const stats = queryProcessor.getEntityStats();
        console.log('üìä Data statistics:', stats);
        
        return true;
    }
    
    return false;
}

// UPRAVEN√Å FUNKCE - Spu≈°tƒõn√≠ aplikace s nov√Ωm syst√©mem
window.onload = function() {
    console.log('üåü Window loaded, starting HYBRID init...');
    setTimeout(hybridInit, 100);
};

// NOV√Å FUNKCE - Hybridn√≠ inicializace
async function hybridInit() {
    console.log('üöÄ Starting hybrid initialization...');
    
    if (typeof security === 'undefined') {
        console.error('‚ùå Security manager not loaded!');
        setTimeout(() => hybridInit(), 100);
        return;
    }
    
    loadConfig();
    
    const chatMessages = document.getElementById('chat-messages');
    
    // Pokud nem√°me API kl√≠ƒçe
    if (!APP_CONFIG.TABIDOO_API_TOKEN || !APP_CONFIG.TABIDOO_APP_ID) {
        chatMessages.innerHTML = '';
        addMessage('system', CONFIG.MESSAGES.WELCOME);
        
        document.getElementById('chat-input').addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });
        return;
    }
    
    // Zobrazit loading zpr√°vu
    chatMessages.innerHTML = `<div class="message system-message">üîÑ Naƒç√≠t√°m data a inicializuji hybridn√≠ syst√©m...</div>`;
    
    try {
        // 1. Naƒç√≠st data
        console.log('üìä Loading Tabidoo data...');
        const dataLoaded = await loadTabidooData();
        
        if (!dataLoaded) {
            throw new Error('Failed to load Tabidoo data');
        }
        
        // 2. Inicializovat query processor
        console.log('üß† Initializing query processor...');
        const processorReady = initializeQueryProcessor();
        
        if (!processorReady) {
            throw new Error('Failed to initialize query processor');
        }
        
        // 3. √öspƒõ≈°n√° inicializace
        chatMessages.innerHTML = '';
        addMessage('system', '‚úÖ Hybridn√≠ syst√©m je p≈ôipraven!');
        
        setTimeout(() => {
            addMessage('assistant', `üéØ Nov√Ω hybridn√≠ syst√©m je aktivn√≠!

**V√Ωhody:**
‚Ä¢ Rychl√© lok√°ln√≠ vyhled√°v√°n√≠
‚Ä¢ P≈ôesn√© poƒç√≠t√°n√≠ z√°znam≈Ø  
‚Ä¢ Inteligentn√≠ rozpozn√°v√°n√≠ dotaz≈Ø
‚Ä¢ ChatGPT jen pro formulaci odpovƒõd√≠

**Zkuste nap≈ô√≠klad:**
‚Ä¢ "Kolik je firem v syst√©mu?"
‚Ä¢ "Vypi≈° v≈°echny firmy"
‚Ä¢ "Najdi firmu Noviko"
‚Ä¢ "Podrobnosti o firmƒõ XYZ"`);
        }, 1000);
        
        // Debug info
        const stats = queryProcessor.getEntityStats();
        console.log('üìà System ready with data:', stats);
        
    } catch (error) {
        console.error('‚ùå Hybrid initialization failed:', error);
        chatMessages.innerHTML = '';
        addMessage('error', '‚ùå Chyba p≈ôi inicializaci hybridn√≠ho syst√©mu. Zkontrolujte nastaven√≠ API.');
        
        // Fallback na star√Ω syst√©m
        console.log('üîÑ Falling back to old system...');
        setTimeout(() => {
            init(true); // Spustit star√Ω syst√©m
        }, 2000);
    }
    
    // P≈ôidat event listener pro Enter
    document.getElementById('chat-input').addEventListener('keydown', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
}

// NOV√Å FUNKCE - Debug funkce pro testov√°n√≠
window.debugQueryProcessor = function(query) {
    if (!queryProcessor) {
        console.log('‚ùå Query processor not initialized');
        return;
    }
    
    console.log('üîç Debug query:', query);
    queryProcessor.processQuery(query).then(result => {
        console.log('üì§ Debug result:', result);
    });
};

// NOV√Å FUNKCE - Z√≠sk√°n√≠ statistik syst√©mu
window.getSystemStats = function() {
    if (!queryProcessor) {
        console.log('‚ùå Query processor not initialized');
        return;
    }
    
    const stats = queryProcessor.getEntityStats();
    console.log('üìä System Statistics:', stats);
    return stats;
};

// Export pro testov√°n√≠
window.hybridSystem = {
    queryProcessor: () => queryProcessor,
    tablesData: () => tablesData,
    sendMessage: sendMessage,
    debugQuery: window.debugQueryProcessor,
    getStats: window.getSystemStats
};
