// Funkce pro zobrazov√°n√≠ dat

// P≈ôid√°n√≠ zpr√°vy do chatu
function addMessage(role, content) {
    console.log('Adding message:', role, content.substring(0, 100));
    
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'message ' + role + '-message';
    messageElement.textContent = content;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    if (role === 'user' || role === 'assistant') {
        messages.push({ role, content });
    }
}

// P≈ôid√°n√≠ diagnostick√© zpr√°vy
function addDiagnosticMessage(text, status = 'info') {
    const diagnosticArea = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'message diagnostic-message';
    
    let icon = 'üîç';
    if (status === 'success') icon = '‚úÖ';
    if (status === 'error') icon = '‚ùå';
    if (status === 'warning') icon = '‚ö†Ô∏è';
    
    messageElement.innerHTML = `${icon} ${text}`;
    diagnosticArea.appendChild(messageElement);
}

// Pomocn√° funkce pro z√≠sk√°n√≠ zobraziteln√© hodnoty z pole
function getDisplayValue(value, fieldName) {
    // Pokud je hodnota null nebo undefined
    if (value === null || value === undefined) {
        return '';
    }
    
    // Pokud je to objekt s fields (reference na jin√Ω z√°znam)
    if (typeof value === 'object' && value.fields) {
        // Prioritn√≠ pole pro zobrazen√≠ osoby
        if (value.fields.name && value.fields.surname) {
            return `${value.fields.name} ${value.fields.surname}`;
        }
        // N√°zev firmy nebo obecn√Ω n√°zev
        if (value.fields.name) {
            return value.fields.name;
        }
        if (value.fields.nazev) {
            return value.fields.nazev;
        }
        if (value.fields.company) {
            return value.fields.company;
        }
        if (value.fields.title) {
            return value.fields.title;
        }
        // Pokud nic z toho nen√≠, zkusit prvn√≠ nepr√°zdnou hodnotu
        for (const [key, val] of Object.entries(value.fields)) {
            if (val && typeof val !== 'object' && !key.startsWith('_')) {
                return String(val);
            }
        }
        return 'Nepojmenovan√Ω z√°znam';
    }
    
    // Pokud je to objekt s count (kolekce z√°znam≈Ø)
    if (typeof value === 'object' && typeof value.count === 'number') {
        const label = fieldName || 'z√°znam≈Ø';
        return `${value.count} ${label}`;
    }
    
    // Pokud je to email objekt
    if (typeof value === 'object' && value.href && value.isMailto) {
        return value.href.replace('mailto:', '');
    }
    
    // Pokud je to pole
    if (Array.isArray(value)) {
        return value.map(item => getDisplayValue(item, fieldName)).join(', ');
    }
    
    // Pokud je to jin√Ω objekt
    if (typeof value === 'object') {
        // Zkusit p≈ôev√©st na string, ale pouze pokud to d√°v√° smysl
        const str = JSON.stringify(value);
        if (str.length < 50) {
            return str;
        }
        return '[slo≈æit√Ω objekt]';
    }
    
    // Pro jednoduch√© hodnoty
    return String(value);
}

// Form√°tovat z√°znamy pro zobrazen√≠ - UPRAVEN√Å VERZE
function formatRecordsForDisplay(records, tableName, maxRecords = CONFIG.DISPLAY.MAX_RECORDS_TO_SHOW) {
    if (!records || records.length === 0) {
        return `Nena≈°el jsem ≈æ√°dn√© z√°znamy v tabulce ${tableName}.`;
    }
    
    let output = `**${tableName}** (celkem ${records.length} z√°znam≈Ø):\n\n`;
    
    const displayRecords = records.slice(0, maxRecords);
    
    displayRecords.forEach((record, index) => {
        output += `${index + 1}. `;
        
        // Z√≠skat zobraziteln√° pole
        const displayFields = [];
        
        // Nejd≈ô√≠v zkusit prioritn√≠ pole
        const priorityFields = ['name', 'nazev', 'title', 'company', 'jmeno', 'prijmeni', 'email'];
        for (const fieldName of priorityFields) {
            if (record[fieldName]) {
                const value = getDisplayValue(record[fieldName], fieldName);
                if (value) {
                    const label = CONFIG.FIELD_MAPPINGS.FIELD_LABELS[fieldName] || fieldName;
                    displayFields.push(`${label}: ${value}`);
                }
            }
        }
        
        // Pokud m√°me fields objekt, zpracovat i ten
        if (record.fields) {
            for (const fieldName of priorityFields) {
                if (record.fields[fieldName] && !displayFields.some(f => f.includes(fieldName))) {
                    const value = getDisplayValue(record.fields[fieldName], fieldName);
                    if (value) {
                        const label = CONFIG.FIELD_MAPPINGS.FIELD_LABELS[fieldName] || fieldName;
                        displayFields.push(`${label}: ${value}`);
                    }
                }
            }
        }
        
        // P≈ôidat dal≈°√≠ d≈Øle≈æit√° pole pokud je≈°tƒõ nejsou zobrazena
        const additionalFields = ['owner', 'status', 'type', 'category'];
        for (const fieldName of additionalFields) {
            const fieldData = record[fieldName] || (record.fields && record.fields[fieldName]);
            if (fieldData && displayFields.length < CONFIG.DISPLAY.PREVIEW_FIELDS_COUNT) {
                const value = getDisplayValue(fieldData, fieldName);
                if (value && !displayFields.some(f => f.includes(value))) {
                    const label = CONFIG.FIELD_MAPPINGS.FIELD_LABELS[fieldName] || fieldName;
                    displayFields.push(`${label}: ${value}`);
                }
            }
        }
        
        // Pokud st√°le nem√°me ≈æ√°dn√° pole, zobrazit prvn√≠ dostupn√°
        if (displayFields.length === 0) {
            const fieldsToCheck = record.fields || record;
            const entries = Object.entries(fieldsToCheck)
                .filter(([key, value]) => {
                    return value && 
                           !CONFIG.FIELD_MAPPINGS.HIDDEN_FIELDS.some(hidden => key.includes(hidden)) &&
                           !key.startsWith('_');
                })
                .slice(0, CONFIG.DISPLAY.PREVIEW_FIELDS_COUNT);
            
            for (const [key, value] of entries) {
                const displayValue = getDisplayValue(value, key);
                if (displayValue) {
                    const label = CONFIG.FIELD_MAPPINGS.FIELD_LABELS[key] || key;
                    displayFields.push(`${label}: ${displayValue}`);
                }
            }
        }
        
        // Vypsat pole nebo alespo≈à ID
        if (displayFields.length > 0) {
            output += displayFields.join(', ');
        } else {
            output += `ID: ${record.id || 'nezn√°m√©'}`;
        }
        
        output += '\n';
    });
    
    if (records.length > maxRecords) {
        output += `\n... a dal≈°√≠ch ${records.length - maxRecords} z√°znam≈Ø.`;
    }
    
    return output;
}
