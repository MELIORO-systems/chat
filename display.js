// Funkce pro zobrazov√°n√≠ dat

// P≈ôid√°n√≠ zpr√°vy do chatu
function addMessage(role, content) {
    console.log('Adding message:', role, content.substring(0, 100));
    
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'message ' + role + '-message';
    messageElement.textContent = content;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    if (role === 'user' || role === 'assistant') {
        messages.push({ role, content });
    }
}

// P≈ôid√°n√≠ diagnostick√© zpr√°vy
function addDiagnosticMessage(text, status = 'info') {
    const diagnosticArea = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'message diagnostic-message';
    
    let icon = 'üîç';
    if (status === 'success') icon = '‚úÖ';
    if (status === 'error') icon = '‚ùå';
    if (status === 'warning') icon = '‚ö†Ô∏è';
    
    messageElement.innerHTML = `${icon} ${text}`;
    diagnosticArea.appendChild(messageElement);
}

// Form√°tovat z√°znamy pro zobrazen√≠
function formatRecordsForDisplay(records, tableName, maxRecords = CONFIG.DISPLAY.MAX_RECORDS_TO_SHOW) {
    if (!records || records.length === 0) {
        return `Nena≈°el jsem ≈æ√°dn√© z√°znamy v tabulce ${tableName}.`;
    }
    
    let output = `**${tableName}** (celkem ${records.length} z√°znam≈Ø):\n\n`;
    
    const displayRecords = records.slice(0, maxRecords);
    
    displayRecords.forEach((record, index) => {
        output += `${index + 1}. `;
        
        // Zjistit v≈°echna pole z√°znamu
        const fields = Object.entries(record)
            .filter(([key, value]) => {
                return value && 
                       !CONFIG.FIELD_MAPPINGS.HIDDEN_FIELDS.some(hidden => key.includes(hidden));
            })
            .slice(0, CONFIG.DISPLAY.PREVIEW_FIELDS_COUNT);
        
        if (fields.length > 0) {
            const formattedFields = fields.map(([key, value]) => {
                // Pou≈æ√≠t label pokud existuje
                const label = CONFIG.FIELD_MAPPINGS.FIELD_LABELS[key] || key;
                
                // Zkr√°tit dlouh√© hodnoty
                const displayValue = String(value).length > CONFIG.DISPLAY.MAX_FIELD_LENGTH ? 
                    String(value).substring(0, CONFIG.DISPLAY.MAX_FIELD_LENGTH) + '...' : value;
                
                return `${label}: ${displayValue}`;
            });
            output += formattedFields.join(', ');
        } else {
            // Pokud nejsou ≈æ√°dn√° pole, zobrazit ID
            output += `ID: ${record.id || 'nezn√°m√©'}`;
        }
        
        output += '\n';
    });
    
    if (records.length > maxRecords) {
        output += `\n... a dal≈°√≠ch ${records.length - maxRecords} z√°znam≈Ø.`;
    }
    
    return output;
}
